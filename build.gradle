plugins {
  id 'application'
  id 'pmd'
  id 'org.sonarqube' version '4.3.0.3225'
  id 'jacoco'
  id 'info.solidsoft.pitest' version '1.9.11'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.springframework.boot' version '3.4.2'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'org.owasp.dependencycheck' version '10.0.4'
  id 'com.github.ben-manes.versions' version '0.51.0'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

dependencies {
  integrationTestImplementation(sourceSets.test.output)
  functionalTestImplementation(sourceSets.test.output)
}

tasks.withType(Copy).configureEach { duplicatesStrategy DuplicatesStrategy.WARN }

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked"
}

tasks.register('functional', Test) {
  description = 'Runs the functional tests.'
  group = 'Verification'
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = 'Runs the integration tests.'
  group = 'Verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.register('smoke', Test) {
  description = 'Runs Smoke Tests.'
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('fortifyScan', JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
      }
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 7-10 fails the build, anything lower and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 7.0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  nvd.validForHours = 24 // on Jenkins we have 24, so if you get more vulnerabilities locally, try to normalize this value with Jenkins

  analyzers {
    retirejs {
      enabled = false
    }
    ossIndex {
      enabled = false
    }
  }
}

repositories {
  mavenLocal()

  mavenCentral()

  // jitpack should be last resort
  // see: https://github.com/jitpack/jitpack.io/issues/1939
  maven { url 'https://jitpack.io' }
  maven {
    url 'https://repo.spring.io/libs-milestone'
  }
}

project.tasks.named('pitest') {
  group = "Verification"
}

pitest {
  targetClasses = ['uk.gov.hmcts.reform.sscs.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.sscs.config.*',
    'uk.gov.hmcts.reform.sscs.bulkscancore.domain.*',
    'uk.gov.hmcts.reform.sscs.domain.*',
    'uk.gov.hmcts.reform.sscs.BulkScanApplication'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 90
}

tasks.register('installLocalGitHook', Copy) {
  from new File(rootProject.rootDir, 'config/git/pre-commit')
  into { new File(rootProject.rootDir, '.git/hooks') }
  fileMode 0775
}

tasks.register('runGitPreCommitTasks') {
  dependsOn 'test'
  dependsOn 'pmdMain'
  dependsOn 'pmdTest'
  dependsOn 'dependencyCheckAggregate'
  dependsOn 'checkstyleMain'
  dependsOn 'checkstyleTest'
}

project.tasks.named('sonarqube') {
  dependsOn test, integration, jacocoTestReport
}

check.dependsOn integration
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)
integration.shouldRunAfter(checkstyleIntegrationTest)
integration.shouldRunAfter(test)

sonarqube {
  properties {
    property "sonar.projectName", "SSCS - Bulk Scan"
    property "sonar.projectKey", "sscs-bulk-scan"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/sscs/domain/**," +
      "src/main/java/uk/gov/hmcts/reform/sscs/bulkscancore/domain/**," +
      "src/main/java/uk/gov/hmcts/reform/sscs/BulkScanApplication.java," +
      "src/main/java/uk/gov/hmcts/reform/sscs/domain/**," +
      "src/main/java/uk/gov/hmcts/reform/sscs/config/**,"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.retry', name: 'spring-retry'

  implementation group: 'me.xdrop', name: 'fuzzywuzzy', version: '1.4.0'
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.3.1'
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: '5.3.1'
  testImplementation group: 'io.rest-assured', name: 'json-path', version: '5.3.1'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.3'
  implementation group: 'com.github.everit-org.json-schema', name: 'org.everit.json.schema', version: '1.14.4'
  implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '7.17.9'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.7.0'

  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'

  implementation group: 'com.github.hmcts', name: 'java-logging', version: '6.1.6'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '5.0.3'

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.0'

  implementation group: 'com.github.hmcts', name: 'sscs-common', version: 'spring-boot-3-SNAPSHOT'

  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
  implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'

  implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

  testImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.4', classifier: 'all'
  testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'

  functionalTestImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.34'

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBoot.class.package.implementationVersion) {
    exclude group: "com.vaadin.external.google", module: "android-json"
  }

  testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'
  testImplementation group: 'net.javacrumbs.json-unit', name: 'json-unit-assertj', version: '3.4.1'
  testImplementation group: 'org.pitest', name: 'pitest', version: '1.17.0'
  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: pitest.pitestVersion.get()
  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: '0.5'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner'

  testImplementation group: 'com.typesafe', name: 'config', version: '1.4.3'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.11.0'
  testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.11.0'
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
}

dependencyManagement {
  dependencies {

    // CVE-2022-1471, CVE-2022-25857, CVE-2022-38749, CVE-2022-38751, CVE-2022-38752, CVE-2022-41854, CVE-2022-38750
    dependency group: 'org.yaml', name: 'snakeyaml', version: '2.0'

    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
    }

    // CVE-2023-35116
    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.17.2') {
        entry 'jackson-databind'
        entry 'jackson-core'
        entry 'jackson-annotations'
    }

// TODO: SB3
//    // CVE-2023-33202
//    dependency group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.1.1'
//
//    //CVE-2023-6378, CVE-2023-6481
//    dependencySet(group: 'ch.qos.logback', version: '1.2.13') {
//      entry 'logback-core'
//      entry 'logback-classic'
//    }
  }
}

run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

application {
  mainClass.set('uk.gov.hmcts.reform.sscs.BulkScanApplication')
}

compileJava.dependsOn installLocalGitHook

tasks.withType(Test).configureEach {
  useJUnitPlatform()
}

bootJar {
  archiveFileName = 'sscs-bulk-scan.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
